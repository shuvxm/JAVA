class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0; i< nums.length; i++){ // first number
            for(int j=i+1; j<nums.length; j++){  // second number
                if(nums[i] + nums[j] == target){
                    return new int[]{i,j}; // return their indices
                }
            }
        }
        return new int[]{};
    } 
}
-------------------------------------------------------
import java.util.HashMap;
import java.util.Map;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        // num1 + num2 = target
        // target - num1 = num2

        int[] res = new int[2];
        Map<Integer, Integer> map = new HashMap();
        for(int i=0; i< nums.length; i++){
            int diff = target - nums[i];
            // so the diff sud be in map
            if(map.containsKey(diff)){
                int index = map.get(diff);
                res[0] = i;
                res[1] = index;
            }
            else{
                map.put(nums[i],i);
            }
        }
        return res;
    } 
}
---------------------------
# 26. Remove Duplicates from Sorted Array
import java.util.Set;
import java.util.LinkedHashSet;

class Solution {
    public int removeDuplicates(int[] nums) {
        Set<Integer> set = new LinkedHashSet<>();
        for(int i=0; i < nums.length; i++){ // Iterate through the array correctly
            set.add(nums[i]);
        }
        // Copy unique elements back to nums (if needed)
        int index = 0;
        for(int unique: set){
            nums[index++] = unique;
        }
        return set.size(); // Return the count of unique elements
    }
}
-------------------------------
We iterate through the array:
If nums[i] is not val, we copy it to nums[k] and increment k.
Finally, k represents the new length of the array after removing all occurrences of val.

# 27. Remove Element
import java.util.Hashtable;
class Solution {
    public int removeElement(int[] nums, int val) {
        int k=0; // pointer for placement of non-val elements
        for(int i=0; i<nums.length;i++){
            if( nums[i] != val){
                nums[k] = nums[i];
                k++;
            }
        }
        return k; // New length of the modified array
    }
}

---------------------------------
35. Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

// Binary Search Question
class Solution {
    public int searchInsert(int[] nums, int target) {
        
        int left =0, right= nums.length-1;
        while(left <= right){
            int mid = (left+right)/2;
            if(nums[mid] == target){
                return mid; // target found at mid index
            } else if( nums[mid] < target){
                left = mid+1; // move right
            } else{
                right = mid-1; // move left
            }
        }
        return left;
    }
}

-------------------------------------------

# 66. Plus One
class Solution {
    public int[] plusOne(int[] digits) {
        for(int i= digits.length-1; i>=0; i--){
            if(digits[i] == 9){ // if the digit is 9 then
                digits[i] = 0;  //  make that digits to be 0
            } else {  // if digits is non 9's
                digits[i]++; // then add 1 in its own digit
                return digits; // and then return the digit
            }
        }
        // for [9,9,9] --> [1,0,0,0]
        // if the digit is 9 then  make that digits to be 0 and 
        // add 1 into their length and make first digit to be 1 
        digits = new int[digits.length + 1];
        digits[0] = 1; // and make first digit to be 1
        return digits;  // and return
    }
}

----------------------------------------------------------
#  88. Merge Sorted Array

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
       int i = m-1;
       int j=n-1;
       int k = (m+n)-1; // k refers to size of nums1 -1
       while(j>=0){
        if(i>=0 && nums1[i] >nums2[j]){
            nums1[k] = nums1[i];
            k--;
            i--;
        } else {
            nums1[k] = nums2[j];
            k--;
            j--;
        }
       }
    }
}

-----------------------------------------------------------
# 189. Rotate Array
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]


class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k=k%n;
        // step1: reverse the entire array
        reverse(nums,0,n-1);  // 3 param: which array,from,to
        //step2: reverse the k-1 element, first k element (till index 2)
        reverse(nums,0,k-1); 
        // reverse the remaining element
        reverse(nums,k,n-1); 
    }
    private void reverse(int[] nums, int start, int end){
        while(start <= end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}

------------------------------------------------------------------------------------------------
# 69. Majority Element
Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

class Solution {
    public int majorityElement(int[] nums) {
        int votes=0, majority = 0;
        for(int i=0; i<nums.length;i++){
            if(votes==0){
                votes++;
                majority = nums[i];
            } else if(majority == nums[i]){
                votes++;
            } else{
                votes--;
            }
        }
        return majority;
    }
}
--------------------------------------------------------------------------------------------------------------
# 283. Move Zeroes
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.
Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]

class Solution {
    public void moveZeroes(int[] nums) {
        // start with the first position
        int insertPosition = 0;
        for(int i=0; i<nums.length;i++){
            if(nums[i] != 0){
                nums[insertPosition] = nums[i];
                insertPosition++;
            } 
        }
        // start from insertPosition after non-zero elements placed at new order
        while(insertPosition < nums.length){
            nums[insertPosition++] = 0;
        }
    }
}
---------------------------------------------------------
268. Missing Number
class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int totalSum = n*(n+1)/2;
        for(int i=0; i<n;i++){
            totalSum = totalSum -nums[i];
        }
        return totalSum;
    }
}

---------------------------------------------------------------------------
# 349. Intersection of Two Arrays
import java.util.*;
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
       Set<Integer> set1 = new HashSet<>();
       Set<Integer> resultSet = new HashSet<>();

       // Add all elements from nums1 to set1
       for(int elem: nums1){
        set1.add(elem);
       }
       // check for intersection
       for(int elem:nums2){
        if(set1.contains(elem)){
            resultSet.add(elem);
        }
       }
       // convert resultSet into int[]
       int[] result = new int[resultSet.size()];
       int index=0;
       for(int num: resultSet){
        result[index++] =num;
       }
       return result;
    }
}

--------------------------------------------------

//  @Transactional  -> this annotation specifies that the method is transactional it means that it will be executed in a single transaction(perform all operations at time or roll back if any operation fails). To use this annotation you should use the annotation in main class where @SpringBoot anootation will be there. e.g: 
@SpringBootApplication
@EnableTransactionManagement

PlatformTransactionManager internally works rollback commit if you use 

--------------------------------------------------------


// Leetcode 217. Contains Duplicate

import java.util.HashSet;

class Solution {
    public boolean containsDuplicate(int[] nums) {
        // create a hashset to store elements from the array.
        HashSet<Integer> seenNumbers = new HashSet<>();

        // Iterate through each element in the array
        for(int num: nums){
            if(seenNumbers.contains(num)){
                return true; // duplicate found
            }
            // if num is not present in collection then add it.
            else {
                seenNumbers.add(num);
            }
        }
        return false; // Duplicate not found
    }
}